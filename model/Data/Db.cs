using StavteClassy;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;

namespace HopeForPravilnost.model
{
    public partial class Db
    {
        List<Государство> государства = new List<Государство>();
        List<Область> области = new List<Область>();
        List<Город> города = new List<Город>();
        List<Район> районы = new List<Район>();

        public Db()
        {
            // Инициализация нескольких объектов государства для демонстрации
            var франция = new Государство(0, "Франция", 111);
            var испания = new Государство(1, "Испания") { ГодСоздания = 1211 };
            var лапландия = new Государство(2, "Лапландия");
            var россия = new Государство(3, "Россия") { ГодСоздания = 2222 };
            var шампань = new Область(0, "Шампань", франция);
            var ростовская = new Область(1, "Ростовская", россия);
            var мухоженуи = new Город(0, "Мухоженуи", шампань);
            var мухосранск = new Город(1, "Мухосранск", ростовская);
            var тринадцатый = new Район(0, "Тринадцатый", мухоженуи, 3, 2);
            // Заполнение информации о домах
            тринадцатый[0, 0] = "Хаус 1A"; // Улица 1, Дом 1
            тринадцатый[0, 1] = "Хаус 1B"; // Улица 1, Дом 2
            тринадцатый[1, 0] = "Хаус 2A"; // Улица 2, Дом 1
            тринадцатый[1, 1] = "Хаус 2B"; // Улица 2, Дом 2
            тринадцатый[2, 0] = "Хаус 3A"; // Улица 3, Дом 1

            var московский = new Район(1, "Московский", мухосранск, 2, 3);
            московский[0, 0] = "Дом 1A"; // Улица 1, Дом 1
            московский[0, 1] = "Дом 1B"; // Улица 1, Дом 2
            московский[1, 0] = "Дом 2A"; // Улица 2, Дом 1
            московский[1, 1] = "Дом 2B"; // Улица 2, Дом 2
            московский[1, 2] = "Дом 3A"; // Улица 2, Дом 1

            районы.Add(московский);
            районы.Add(тринадцатый);
            города.Add(мухоженуи);
            города.Add(мухосранск);
            области.Add(шампань);
            области.Add(ростовская);

            государства.Add(франция);
            государства.Add(испания);
            государства.Add(лапландия);
            государства.Add(россия);

            россия.ДобавитьОбласть(ростовская);
            ростовская.ДобавитьГород(мухосранск);
            мухосранск.ДобавитьРайон(московский);

            франция.ДобавитьОбласть(шампань);
            шампань.ДобавитьГород(мухоженуи);
            мухоженуи.ДобавитьРайон(тринадцатый);
        }
        public List<Государство> GetГосударства()
        {
            return государства;
        }
        public List<Область> GetОбласти()
        {
            return области;
        }
        public List<Город> GetГорода()
        {
            return города;
        }
        public List<Район> GetРайоны()
        {
            return районы;
        }

        public void AddГосударство(int id, string название, int _годСоздания)
        {
            // Проверка, существует ли уже государство с таким ID
            if (государства.Exists(g => g.ID == id))
            {
                MessageBox.Show($"Государство с ID {id} уже существует. Пожалуйста, выберите другой ID.", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            else
            {
                // Создание нового государства в списке
                Государство новоеГосударство = new Государство(id, название) { ГодСоздания = _годСоздания };
                государства.Add(новоеГосударство);

                // Выводим сообщение об успешном создании
                MessageBox.Show($"Государство '{название}' с ID {id} успешно создано!", "Успех", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }
        public void AddОбласть(int id, string название, int idВГосударстве)
        {
            // Проверка, существует ли уже субъект с таким ID
            if (области.Exists(o => o.ID == id))
            {
                MessageBox.Show($"Область с ID {id} уже существует. Пожалуйста, выберите другой ID.", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            else
            {
                /*Субъект новыйСубъект = new Область(id, название);
                Область новаяОбласть = (Область)новыйСубъект;*/
                if (государства.Exists(g => g.ID == idВГосударстве))
                {
                    Государство найденноеГосударство = государства.Find(g => g.ID == idВГосударстве);
                    Область новаяОбласть = new Область(id, название, найденноеГосударство);
                    области.Add(новаяОбласть);
                    найденноеГосударство.ДобавитьОбласть(новаяОбласть);
                }
                else { Область новаяОбласть = new Область(id, название); области.Add(новаяОбласть); }

                // Выводим сообщение об успешном создании
                MessageBox.Show($"Область '{название}' с ID {id} успешно создано!", "Успех", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }
        public void AddГород(int id, string название, int idВОбласти)
        {
            // Проверка, существует ли уже государство с таким ID
            if (города.Exists(g => g.ID == id))
            {
                MessageBox.Show($"Город с ID {id} уже существует. Пожалуйста, выберите другой ID.", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            else
            {
                //Демонстрация явного-неявного преобразования
                Субъект новыйСубъект = new Город(id, название);
                MessageBox.Show($"Вы ввели данные: {новыйСубъект.ToString()}"); // метод из класса Субъект
                Город новыйГород = (Город)новыйСубъект;
                MessageBox.Show($"На основе данных => {новыйГород.ToString()}"); // метод из класса Город

                if (области.Exists(o => o.ID == idВОбласти))
                {
                    Область найденнаяОбласть = области.Find(o => o.ID == idВОбласти);
                    Город реальноНовыйГород = new Город(id, название, найденнаяОбласть);
                    города.Add(реальноНовыйГород);
                    найденнаяОбласть.ДобавитьГород(реальноНовыйГород);
                }
                else { Город реальноНовыйГород = new Город(id, название); города.Add(реальноНовыйГород); }

                MessageBox.Show($"Город '{название}' с ID {id} успешно создано!", "Успех", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }
        public void AddРайон(int id, string название, int idВГороде)
        {
            // Проверка, существует ли уже субъект с таким ID
            if (районы.Exists(g => g.ID == id))
            {
                MessageBox.Show($"Район с ID {id} уже существует. Пожалуйста, выберите другой ID.", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            else
            {
                if (города.Exists(g => g.ID == idВГороде))
                {
                    Город найденныйГород = города.Find(g => g.ID == idВГороде);
                    Район новыйРайон = new Район(id, название, найденныйГород);
                    районы.Add(новыйРайон);
                    найденныйГород.ДобавитьРайон(новыйРайон);
                }
                else
                {
                    Район новыйРайон = new Район(id, название);
                    районы.Add(новыйРайон);
                }
            }
        }
        public Государство FindГосударствоId(int id)
        {
            Государство найденноеГосударство = государства.Find(g => g.ID == id);
            return найденноеГосударство;
        }
        public Государство FindГосударствоName(string название)
        {
            Государство найденноеГосударство = государства.Find(g => g.Название == название);
            return найденноеГосударство;
        }
        public Область FindОбластьName(string название)
        {
            Область найденнаяОбласть = области.Find(g => g.Название == название);
            return найденнаяОбласть;
        }
        public Город FindГородName(string название)
        {
            Город найденныйГород = города.Find(g => g.Название == название);
            return найденныйГород;
        }
        public Район FindРайонId(int id)
        {
            Район найденныйСубъект = районы.Find(g => g.ID == id);
            return найденныйСубъект;
        }
        public Район FindРайонName(string название)
        {
            Район найденныйРайон = районы.Find(g => g.Название == название);
            return найденныйРайон;
        }
        public void SetПравитель(int id, string t1, string t2, string t3, int age)
        {
            Государство найденноеГосударство = государства.Find(g => g.ID == id);
            if (найденноеГосударство != null)
            {
                найденноеГосударство.УстановитьПравителя(t1, t2, t3, age, DateTime.Now);
            }
        }
        // Революция

        // Устроить революцию - удаление правителя с событием
        private void Государство_ПравителяНет(string сообщение) // Обработчик события
        {
            MessageBox.Show(сообщение, "Сообщение о революции", MessageBoxButtons.OK, MessageBoxIcon.Information);

            
        }
        public void SetРеволюцияButton(int id)
        {
            Государство найденноеГосударство = государства.Find(g => g.ID == id);

            if (найденноеГосударство != null)
            {
                найденноеГосударство.ПравителяНет -= Государство_ПравителяНет; // отписка, чтобы избежать повтора
                найденноеГосударство.ПравителяНет += Государство_ПравителяНет; // подписка на событие
                // обновляем состояние безопасности районов
                SetРеволюция(id);
                найденноеГосударство.Революция(); // вызываем революцию
            }
        }
        public void SetРеволюция(int id)
        {
            Государство найденноеГосударство = государства.Find(g => g.ID == id);

            if (найденноеГосударство != null)
            {
                foreach (var область in найденноеГосударство.Области)
                {
                    foreach (var город in область.Города)
                    {
                        foreach (var район in город.Районы)
                        {
                            if (район != null)
                            {
                                район.БезопасностьИзменилась -= Район_СостояниеИзменилось;
                                район.БезопасностьИзменилась += Район_СостояниеИзменилось;
                                район.СостояниеБезопасности = "Опасный";
                            }
                        }
                    }
                }
            }
        }
        // Безопасность района
        private void Район_СостояниеИзменилось(object sender, БезопасностьИзмениласьEventArgs e)
        {
            MessageBox.Show($"Состояние района '{e.НазваниеРайона}' изменилось на '{e.НовоеСостояние}'.",
                            "Изменение состояния",
                            MessageBoxButtons.OK,
                            MessageBoxIcon.Information);
        }
        public void SetРайонОпасный(int id)
        {
            Район найденныйСубъект = районы.Find(g => g.ID == id);

            if (найденныйСубъект != null)
            {
                найденныйСубъект.БезопасностьИзменилась -= Район_СостояниеИзменилось;
                найденныйСубъект.БезопасностьИзменилась += Район_СостояниеИзменилось;
                найденныйСубъект.СостояниеБезопасности = "Опасный";
            }
        }
        public void SetРайонБезопасный(int id)
        {
            Район найденныйСубъект = районы.Find(g => g.ID == id);

            if (найденныйСубъект != null)
            {
                найденныйСубъект.БезопасностьИзменилась -= Район_СостояниеИзменилось;
                найденныйСубъект.БезопасностьИзменилась += Район_СостояниеИзменилось;
                найденныйСубъект.СостояниеБезопасности = "Безопасный";
            }
        }
        public void ИзменитьНазваниеГосударства(ref Государство государство, string новоеНазвание)
        {
            государство.Название = новоеНазвание;
        }
        public void ClearDB()
        {
            государства.Clear();
            области.Clear();
            города.Clear();
            районы.Clear();
        }


    }
}
